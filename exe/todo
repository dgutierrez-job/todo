#!/usr/bin/env ruby

require 'thor'
require_relative '../lib/todo'

class TodoCLI < Thor
  desc 'list', 'List all tasks '
  def list
    puts todo.list.to_json
  rescue TodoFileReadError => e
    puts "ERROR: #{e.message}"
  end

  desc 'find', 'Find task by ID'
  def find(id)
    task = todo.find id

    return if task.nil?

    puts task.to_json
  rescue TodoFileReadError => e
    puts "ERROR: #{e.message}"
  end

  desc 'delete', 'Delete task by ID'
  def delete(id)
    task = todo.delete id

    return if task.nil?

    puts task.to_json
  rescue TodoFileReadError => e
    puts "ERROR: #{e.message}"
  end

  desc 'create TITLE', 'Create task with TITLE'
  option :done, type: :boolean
  option :undone, type: :boolean
  option :description

  def create(title)
    new_options = options.transform_keys(&:to_sym)
    new_options.delete :undone if new_options[:undone]
    task = todo.create(title, **new_options)
    puts task.to_json
  rescue TodoError => e
    puts "ERROR: #{e.message}"
  end

  desc 'edit ID', 'Edit task by ID'
  option :done, type: :boolean
  option :undone, type: :boolean
  option :title
  option :description
  def edit(id)
    new_options = options.transform_keys(&:to_sym)
    if new_options[:undone]
      new_options.delete :undone
      new_options[:done] = false
    end
    task = todo.edit(id, **new_options)

    return if task.nil?

    puts task.to_json
  rescue TodoFileReadError => e
    puts "ERROR: #{e.message}"
  end

  no_commands do
    def todo
      @todo ||= Todo.new storage
    end

    def storage
      @storage ||= JSONStorage.new 'añskfñosajfkas.json'
      # @storage ||= JSONStorage.new 'tasks_sample.json'
      # @storage ||= JSONFile.new 'tasks.json'
      # @storage || = CSVFile.new 'asfsafsfaa.csv'
      # @storage ||= CSVFile.new 'tasks.csv'
      # @storage ||= CSVFile.new 'tasks_sample.csv'
    end
  end
end

TodoCLI.start ARGV
